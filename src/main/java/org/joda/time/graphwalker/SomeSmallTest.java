  package org.joda.time.graphwalker;



import static org.junit.Assert.assertEquals;

import org.graphwalker.core.machine.ExecutionContext;
import org.graphwalker.java.annotation.GraphWalker;
import org.joda.time.DateTime;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;


/**
 * See: http://graphwalker.org/docs/maven_archetype for more details
 * <p/>
 * Implements the GraphWalker model: src/main/resources/SmallTest.graphml
 * The SmallTest.graphml can be opened and edited using http://www.yworks.com/en/products/yfiles/yed/
 * <p/>
 * For convienicene, a jpg image exists side-by-side in the same folder.
 * <p/>
 * The @GraphWalker annotation, has the following meaning:
 * 1) value defines the generator of this test. Please read more
 * on the subject at: http://graphwalker.org/docs/path_generators_and_stop_conditions
 * 2) start defines the first element in the model to be executed. (Element is
 * either a vertex or an edge)
 * <p/>
 * The interface SmallTest, that SomeSmallTest implements, is generated by
 * running: mvn graphwalker:generate-sources
 * also: mvn graphwalker:test
 */
@GraphWalker(value = "random(edge_coverage(100))", start = "e_FirstAction")
public class SomeSmallTest extends ExecutionContext {//implements SmallTest {
	long date = 0;
	final long EXPECTED_DATE = 0;

  //@Override
  public void e_FirstAction() {
	  DateTime dt = new DateTime(date);
      
       DateTime dtBuddhist = dt.withChronology(BuddhistChronology.getInstance()); 
       
       DateTime dtGregorian = dtBuddhist.withChronology(GregorianChronology.getInstance());
       
       date = dtGregorian.getMillis();
  }

  //@Override
  public void e_AnotherAction() {
	DateTime dt = new DateTime(date);
	
    DateTime dtIslamic = dt.withChronology(IslamicChronology.getInstance()); 
    
    DateTime dtGregorian = dtIslamic.withChronology(GregorianChronology.getInstance());
    
    date = dtGregorian.getMillis();
  }

  //@Override
  public void e_SomeAction() {
		DateTime dt = new DateTime(date);
		
	    DateTime dtEthiopic= dt.withChronology(EthiopicChronology.getInstance()); 
	    
	    DateTime dtGregorian = dtEthiopic.withChronology(GregorianChronology.getInstance());
	    
	    date = dtGregorian.getMillis();
  }

  //@Override
  public void e_SomeOtherAction() {
	  assertEquals(date, EXPECTED_DATE);
  }

  //@Override
  public void v_VerifySomeAction() {
	  assertEquals(date, EXPECTED_DATE);
  }

  //@Override
  public void v_VerifySomeOtherAction() {
	  assertEquals(date, EXPECTED_DATE);
  }
}
